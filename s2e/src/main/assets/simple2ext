#!/system/bin/sh

# Initialization, checks and mounts
BB="busybox"
DELETE="busybox rm -rf"
S2E_CONFIG_DIR=/data/local/s2e_config/
LOGGER=/data/local/bin/logger
LOGFILE=/data/local/s2e.log

if [ -e ${LOGFILE} ];
then
    ${DELETE} ${LOGFILE}
    ${BB} touch ${LOGFILE}
else
    ${BB} touch ${LOGFILE}
fi

# Initialization
${LOGGER} "Initialization..."

if [ "${SD_EXT_DIRECTORY}" = "" ];
then
    SD_EXT_DIRECTORY=/sd-ext
fi


# Checking for ext partitions
for NUM in `seq 0 9`;
do
    TYPE=`cat /sys/block/mmcblk${NUM}/device/type`
    if [ "${TYPE}" = "SD" ];
    then
        EXTPART=/dev/block/mmcblk${NUM}p2
        SD_FOUND="1"
        break
    fi
done
if [ "${SD_FOUND}" = "1" ];
then
    ${LOGGER} "Ext partition found: ${EXTPART}" lb
else
    ${LOGGER} "Ext partition not found... Exit!"
    exit
fi

if [ -e "/data/local/bin/tune2fs" ];
then
    ${LOGGER} "Use built-in tune2fs" l
    TUNE2FS="/data/local/bin/tune2fs"
else
    ${LOGGER} "Use system tune2fs" l
    TUNE2FS="tune2fs"
fi

if [ -e "/data/local/bin/e2fsck" ];
then
    ${LOGGER} "Use built-in e2fsck" lb
    E2FSCK="/data/local/bin/e2fsck"
else
    ${LOGGER} "Use system e2fsck" lb
    E2FSCK="e2fsck"
fi

if [ -e "${S2E_CONFIG_DIR}.read_ahead" ];
then
    ${LOGGER} "Setup read_ahead value" lb
    ${BB} cat ${S2E_CONFIG_DIR}.read_ahead > /sys/devices/virtual/bdi/179:0/read_ahead_kb
fi

if [ -e "${S2E_CONFIG_DIR}.mounts_ext4" ];
then
    ${LOGGER} "Start mounting ${EXTPART} as ext4" l
    if [ "`${BB} egrep -q ${SD_EXT_DIRECTORY} /proc/mounts; ${BB} echo $?`" = "0" ];
    then
        ${LOGGER} "Unmounting ${EXTPART}..." l
        ${BB} umount ${SD_EXT_DIRECTORY}
    fi
    if [ ! -e ${SD_EXT_DIRECTORY} ];
    then
        ${LOGGER} "${SD_EXT_DIRECTORY} not exists! Create..." l
        ${BB} mount -o remount,rw /
        ${BB} mkdir ${SD_EXT_DIRECTORY}
        ${BB} chown system:system ${SD_EXT_DIRECTORY}
        ${BB} chmod 0771 ${SD_EXT_DIRECTORY}
        ${BB} mount -o remount,ro /
    fi

    ${LOGGER} "Setup options to ${EXTPART}:" l
    ${TUNE2FS} -O extents,uninit_bg,dir_index ${EXTPART} >> ${LOGFILE}

    ${LOGGER} "Checking ${EXTPART}:" l
    ${E2FSCK} -yf ${EXTPART} >> ${LOGFILE}

    ${LOGGER} "Disabling journaling on ${EXTPART}:" l
    ${TUNE2FS} -o journal_data_writeback ${EXTPART}  >> ${LOGFILE}
    ${TUNE2FS} -O ^has_journal ${EXTPART}  >> ${LOGFILE}

    ${LOGGER} "Mounting ${EXTPART}..." lb
    ${BB} mount -t ext4 -o commit=19,barrier=0,nobh,nouser_xattr,errors=continue,noatime,nodiratime,nosuid,nodev,data=writeback ${EXTPART} ${SD_EXT_DIRECTORY}
fi

if [ "`${BB} egrep -q ${SD_EXT_DIRECTORY} /proc/mounts; ${BB} echo $?`" != "0" ];
then
    ${LOGGER} "${EXTPART} not mounted... Exit!"
    exit
else
    ${LOGGER} "${EXTPART} successfully mounted!" lb

fi

if [ -e '/data/data/ru.krikun.s2e/shared_prefs/ru.krikun.s2e_preferences.xml' ];
then
    S2E_PREF='/data/data/ru.krikun.s2e/shared_prefs/ru.krikun.s2e_preferences.xml'
    S2E_STATUS='/data/data/ru.krikun.s2e/status'
    ${LOGGER} "Config found on /data/data" l
else
    if [ -e '/sd-ext/data/ru.krikun.s2e/shared_prefs/ru.krikun.s2e_preferences.xml' ];
    then
        S2E_PREF='/sd-ext/data/ru.krikun.s2e/shared_prefs/ru.krikun.s2e_preferences.xml'
        S2E_STATUS='/sd-ext/data/ru.krikun.s2e/status'
        ${LOGGER} "Config found on /sd-ext/data" l
    else
        ${LOGGER} "Config not found... Exit!"
        exit
    fi
fi

if [ ! -e ${S2E_STATUS} ];
then
    ${LOGGER} "Status dir not found! Create..." lb
    ${BB} mkdir  ${S2E_STATUS}
else
    ${LOGGER} "Status dir found! Erase..." lb
    ${DELETE} ${S2E_STATUS}/*
fi

# Apps and Private Apps
for dir in app app-private;
do
    CONFIG=`${BB} grep -q "name=\"${dir}\" value=\"true\"" ${S2E_PREF}; ${BB} echo $?`
    if [ "${CONFIG}" = "0" ];
    then
        if [ "`${BB} egrep -q \"/data/${dir}\" /proc/mounts; ${BB} echo $?`" != "0" ];
        then
            if [ ! -e "${SD_EXT_DIRECTORY}/${dir}" ];
            then
                ${BB} mkdir ${SD_EXT_DIRECTORY}/${dir}
                ${BB} chown system:system ${SD_EXT_DIRECTORY}/${dir}
                ${BB} chmod 0771 ${SD_EXT_DIRECTORY}/${dir}
            fi
            for app in `${BB} find "/data/${dir}" -type f -iname "*.apk" -o -iname "*.zip"`;
            do
                ${BB} mv ${app} ${SD_EXT_DIRECTORY}/${dir}/
            done

            ${BB} mount -o bind ${SD_EXT_DIRECTORY}/${dir}/ /data/${dir}

            if [ "`${BB} egrep -q \"/data/${dir}\" /proc/mounts; ${BB} echo $?`" = "0" ];
            then
                ${LOGGER} "${SD_EXT_DIRECTORY}/${dir} mount as /data/${dir}"
                ${BB} touch ${S2E_STATUS}/${dir}
            else
                ${LOGGER} "${SD_EXT_DIRECTORY}/${dir} not mount..."
            fi
        else
            ${LOGGER} "${SD_EXT_DIRECTORY}/${dir} already mount..."
        fi
    else
        if [ -e "${SD_EXT_DIRECTORY}/${dir}" ];
        then
            if [ "$(ls ${SD_EXT_DIRECTORY}/${dir})" ];
            then
                for app in `${BB} find "${SD_EXT_DIRECTORY}/${dir}" -type f -iname "*.apk" -o -iname "*.zip"`;
                do
                    ${BB} mv ${app} /data/${dir}/
                done
                ${DELETE} ${SD_EXT_DIRECTORY}/${dir}
            else
                ${DELETE} ${SD_EXT_DIRECTORY}/${dir}
            fi
        fi
    fi
done

# Paid Apps
CONFIG=`${BB} grep -q "name=\"app-asec\" value=\"true\"" ${S2E_PREF}; ${BB} echo $?`
if [ "${CONFIG}" = "0" ];
then
	if [ "`${BB} egrep -q \"/data/app-asec\" /proc/mounts; ${BB} echo $?`" != "0" ];
	then
		if [ ! -e "${SD_EXT_DIRECTORY}/app-asec" ];
		then
			${BB} mkdir ${SD_EXT_DIRECTORY}/app-asec
			${BB} chown root:root ${SD_EXT_DIRECTORY}/app-asec
			${BB} chmod 0700 ${SD_EXT_DIRECTORY}/app-asec
		fi
		for app in `${BB} find "/data/app-asec" -type f -iname "*.asec" -o -iname "*.zip"`;
		do
			${BB} mv ${app} ${SD_EXT_DIRECTORY}/app-asec/
		done

		${BB} mount -o bind ${SD_EXT_DIRECTORY}/app-asec/ /data/app-asec

		if [ "`${BB} egrep -q \"/data/app-asec\" /proc/mounts; ${BB} echo $?`" = "0" ];
		then
			${LOGGER} "${SD_EXT_DIRECTORY}/app-asec mount as /data/app-asec"
			${BB} touch ${S2E_STATUS}/app-asec
		else
			${LOGGER} "${SD_EXT_DIRECTORY}/app-asec not mount..."
		fi
	else
		${LOGGER} "${SD_EXT_DIRECTORY}/app-asec already mount..."
	fi
else
	if [ -e "${SD_EXT_DIRECTORY}/app-asec" ];
	then
		if [ "$(ls ${SD_EXT_DIRECTORY}/app-asec)" ];
		then
			for app in `${BB} find "${SD_EXT_DIRECTORY}/app-asec" -type f -iname "*.asec" -o -iname "*.zip"`;
			do
				${BB} mv ${app} /data/app-asec/
			done
			${DELETE} ${SD_EXT_DIRECTORY}/app-asec
		else
			${DELETE} ${SD_EXT_DIRECTORY}/app-asec
		fi
	fi
fi

# Data
CONFIG=`${BB} grep -q "name=\"data\" value=\"true\"" ${S2E_PREF}; ${BB} echo $?`
if [ "${CONFIG}" = "0" ];
then
    if [ "`${BB} egrep -q \"/data/data\" /proc/mounts; ${BB} echo $?`" != "0" ];
    then
        if [ ! -e "${SD_EXT_DIRECTORY}/data" ];
        then
            ${BB} mkdir ${SD_EXT_DIRECTORY}/data
            ${BB} chown system:system ${SD_EXT_DIRECTORY}/data
            ${BB} chmod 0771 ${SD_EXT_DIRECTORY}/data
        fi
        if [ "$(ls /data/data)" ];
        then
            ${BB} mv /data/data/* ${SD_EXT_DIRECTORY}/data
            ${DELETE} /data/data/*
        fi

        ${BB} mount -o bind ${SD_EXT_DIRECTORY}/data/ /data/data

        if [ "`${BB} egrep -q \"/data/data\" /proc/mounts; ${BB} echo $?`" = "0" ];
        then
            ${LOGGER} "${SD_EXT_DIRECTORY}/data mount as /data/data"
            ${BB} touch ${S2E_STATUS}/data
        else
            ${LOGGER} "${SD_EXT_DIRECTORY}/data not mount..."
        fi
    else
        ${LOGGER} "${SD_EXT_DIRECTORY}/data already mount..."
    fi
else
    if [ -e "${SD_EXT_DIRECTORY}/data" ];
    then
        if [ "$(ls ${SD_EXT_DIRECTORY}/data)" ];
        then
            ${BB} mv ${SD_EXT_DIRECTORY}/data/* /data/data/
            ${DELETE} ${SD_EXT_DIRECTORY}/data
        fi
        if [ -e '/data/data/ru.krikun.s2e/shared_prefs/ru.krikun.s2e_preferences.xml' ];
        then
            S2E_PREF='/data/data/ru.krikun.s2e/shared_prefs/ru.krikun.s2e_preferences.xml'
            S2E_STATUS='/data/data/ru.krikun.s2e/status'
            ${LOGGER} "Config now on /data/data"
        fi
    fi
fi

# Dalvik-Cache
CONFIG=`${BB} grep -q "name=\"dalvik-cache\" value=\"true\"" ${S2E_PREF}; ${BB} echo $?`
if [ "${CONFIG}" = "0" ];
then
    if [ "`${BB} egrep -q \"/data/dalvik-cache\" /proc/mounts; ${BB} echo $?`" != "0" ];
    then
        if [ ! -e "${SD_EXT_DIRECTORY}/dalvik-cache" ];
        then
            ${BB} mkdir ${SD_EXT_DIRECTORY}/dalvik-cache
            ${BB} chown system:system ${SD_EXT_DIRECTORY}/dalvik-cache
            ${BB} chmod 0771 ${SD_EXT_DIRECTORY}/dalvik-cache
        fi
        if [ "$(ls /data/dalvik-cache)" ];
        then
            ${DELETE} /data/dalvik-cache/*
        fi

        ${BB} mount -o bind ${SD_EXT_DIRECTORY}/dalvik-cache/ /data/dalvik-cache

        if [ "`${BB} egrep -q \"/data/dalvik-cache\" /proc/mounts; ${BB} echo $?`" = "0" ];
        then
            ${LOGGER} "${SD_EXT_DIRECTORY}/dalvik-cache mount as /data/dalvik-cache"
            ${BB} touch ${S2E_STATUS}/dalvik-cache
        else
            ${LOGGER} "${SD_EXT_DIRECTORY}/dalvik-cache not mount..."
        fi
    else
        ${LOGGER} "${SD_EXT_DIRECTORY}/dalvik-cache already mount..."
    fi
else
    if [ -e "${SD_EXT_DIRECTORY}/dalvik-cache" ];
    then
        ${DELETE} ${SD_EXT_DIRECTORY}/dalvik-cache
    fi
fi

# Download cache
CONFIG=`${BB} grep -q "name=\"download\" value=\"true\"" ${S2E_PREF}; ${BB} echo $?`
if [ "${CONFIG}" = "0" ];
then
    if [ "`${BB} egrep -q \"/cache/download\" /proc/mounts; ${BB} echo $?`" = "0" ];
    then
        ${BB} umount /cache/download
        ${LOGGER} "Unmount /cache/download..." l
    fi
    if [ ! -e "${SD_EXT_DIRECTORY}/download" ];
    then
        ${BB} mkdir ${SD_EXT_DIRECTORY}/download
        ${BB} chown system:cache ${SD_EXT_DIRECTORY}/download
        ${BB} chmod 0777 ${SD_EXT_DIRECTORY}/download
    fi
    if [ "$(ls /cache/download)" ];
    then
        ${DELETE} /cache/download/*
    fi

    ${BB} mount -o bind ${SD_EXT_DIRECTORY}/download/ /cache/download

    if [ "`${BB} egrep -q \"/cache/download\" /proc/mounts; ${BB} echo $?`" = "0" ];
    then
        ${LOGGER} "${SD_EXT_DIRECTORY}/download mount as /cache/download"
        ${BB} touch ${S2E_STATUS}/download
    else
        ${LOGGER} "${SD_EXT_DIRECTORY}/download not mount..."
    fi
else
    if [ -e "${SD_EXT_DIRECTORY}/download" ];
    then
        ${DELETE} ${SD_EXT_DIRECTORY}/download
    fi
fi

# Finish
${LOGGER} "Done!" s
